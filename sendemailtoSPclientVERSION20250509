import pandas as pd
import numpy as np
from datetime import date
import openpyxl
from openpyxl.styles import Border, Side, Alignment
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import os
import urllib.parse
from openpyxl.utils.dataframe import dataframe_to_rows

# ================== 配置参数 ==================
pricingdate = pd.to_datetime("2025-5-6")
sender = "fdi_trade_service@xyzq.com.cn"
email_body = """请以此为准，谢谢！
您好，估值文件如附...（完整免责声明内容同原R代码）"""

# ================== 核心逻辑 ==================
# 读取原始数据
modifytrade = pd.read_excel("optionlist.xlsx", sheet_name=7)  # 第8个sheet
customerlist = modifytrade['CustomerName'].unique()

# 计算annualizedPV
modifytrade['Startdate'] = pd.to_datetime(modifytrade['Startdate'])

modifytrade['livingdays'] = (pricingdate - modifytrade['Startdate']).dt.days

conditions = [
    modifytrade['ModifyType'] != 2,
    modifytrade['ModifyType'] == 2
]
choices = [
    modifytrade['Premium'] - modifytrade['NotionalPrincipal'] * modifytrade['Premium_Percentage'] * modifytrade[
        'livingdays'] / 365,
    modifytrade['NotionalPrincipal'] * (1 + modifytrade['Fixedrate_Annual'] * modifytrade['livingdays'] / 365)
]
modifytrade['annualizedPV'] = np.select(conditions, choices)

# 通用样式设置
thin_border = Border(
    left=Side(style='thin'),
    right=Side(style='thin'),
    top=Side(style='thin'),
    bottom=Side(style='thin')
)
center_alignment = Alignment(horizontal='center', wrap_text=True)

for customer in customerlist:
    customer_data = modifytrade[modifytrade['CustomerName'] == customer]
    # receiver = ["fdi_derivs_trading@xyzq.com.cn"] + customer_data.iloc[0]['MailAddress'].split(',')
    receiver = ["lvjiawei@xyzq.com.cn"]

    # ========== 处理估值报告 ==========
    if customer_data.iloc[0]['ModifyType'] == 2:
        # 收益凭证估值报告处理
        report_name = f"兴业证券-{customer}-收益凭证估值报告-{pricingdate.strftime('%Y-%m-%d')}.xlsx"
        file_path = os.path.join("D:\\workingdirectory\\ValuationFile", report_name)

        wb = openpyxl.load_workbook(file_path)
        ws = wb.worksheets[0]
        start_row = 5
        end_row = start_row + len(customer_data) - 1
        n_col = ws['N']
        i_col = ws['I']
        raw_pv_list = [cell.value for cell in n_col[start_row - 1:end_row]]
        i_values = [cell.value for cell in i_col[start_row - 1:end_row]]
        modified_pv = np.maximum(customer_data['annualizedPV'].values, raw_pv_list)
        modified_nav = np.round(modified_pv / i_values, 4)
        # raw_pv = ws['N5'].value
        # modified_pv = max(customer_data['annualizedPV'].iloc[0], raw_pv)
        # modified_nav = round(modified_pv / ws['I5'].value, 4)
        for idx, (pv, nav) in enumerate(zip(modified_pv, modified_nav), start=start_row):
            ws[f'N{idx}'] = pv
            ws[f'O{idx}'] = nav
        wb.save(file_path)
    else:
        # 场外交易估值报告处理（ModifyType=1或3）
        report_name = f"兴业证券-{customer}-场外交易估值报告-{pricingdate.strftime('%Y-%m-%d')}.xlsx"
        file_path = os.path.join("D:\\workingdirectory\\ValuationFile", report_name)
        raw_wb = openpyxl.load_workbook(file_path)
        raw_ws1 = raw_wb.worksheets[0]
        raw_ws2 = raw_wb.worksheets[1]
        start_row=3
        if customer_data.iloc[0]['ModifyType'] == 1:
            # 加载模板文件
            wb = openpyxl.load_workbook("D:\\workingdirectory\\valuationreport_options_modified.xlsx")
            ws1 = wb.worksheets[0]
            ws2 = wb.worksheets[1]

            # 填充首部信息
            ws1['B1'] = customer
            ws1['B2'] = pricingdate.strftime("%Y/%m/%d")

            # 填充现金摘要（假设原始现金摘要在第6行）
            cash_summary = []
            for cell in raw_ws1[6][0:5]:
                cash_summary.append(cell.value)
            #cash_summary = pd.DataFrame([cash_summary])

            for col_idx, value in enumerate(cash_summary, start=1):
                cell = ws1.cell(row=6, column=col_idx, value=value)
                cell.border = thin_border
                cell.alignment = center_alignment

            # 填充详细交易数据（核心修改逻辑）
            tradedata = []
            for row in raw_ws1.iter_rows(min_row=3, min_col=1, max_col=19, values_only=True):
                #rowdata = [cell.value for cell in row]
                tradedata.append(row)
            tradedata = pd.DataFrame(tradedata)
            tradedata[19]=tradedata[18]
            tradedata[18]=customer_data['annualizedPV']
            tradedata[18]=tradedata[[17,18]].max(axis=1)


            # 写入工作表并设置样式
            for row_idx, row in enumerate(dataframe_to_rows(tradedata[[*range(20)]], index=False, header=False),
                                          start=start_row):
                ws2.append(row)
            #for col in range(1, 20):  # 处理19列
            #    cell = ws2.cell(row=last_row, column=col)
             #   cell.border = thin_border
             #   cell.alignment = center_alignment

            # 保存文件
            wb.save(file_path)
        elif customer_data.iloc[0]['ModifyType'] == 3:
            cells = raw_ws2.iter_rows(min_row=start_row, min_col=18, max_col=18, values_only=False)
            for idx, cell in enumerate(cells):
                current_val = cell[0].value
                if current_val < customer_data['annualizedPV'].tolist()[idx]:
                    cell[0].value = customer_data['annualizedPV'].tolist()[idx]
            wb.save(file_path)



    # ========== 发送邮件 ==========
    msg = MIMEMultipart()
    msg['From'] = sender
    msg['To'] = ", ".join(receiver)
    msg['Subject'] = report_name
    msg.attach(MIMEText(email_body, 'plain', 'utf-8'))

    with open(file_path, 'rb') as f:
        full_filename = os.path.basename(file_path)  # 带扩展名的文件名
        part = MIMEApplication(f.read(), Name=full_filename)
        encoded_filename = f"utf-8''{urllib.parse.quote(full_filename)}"
        part['Content-Disposition'] = f'attachment; filename="{report_name}"'
        msg.attach(part)

    try:
        # 使用SMTP_SSL加密连接
        with smtplib.SMTP_SSL("mail.xyzq.com.cn", 994) as server:
            server.login(sender, "BkgChK4BgKkXnKre")  # 密码建议从环境变量读取
            server.send_message(msg)
            print(f"邮件发送成功：{customer}")
    except Exception as e:
        print(f"邮件发送失败（{customer}）：{str(e)}")
